#!/usr/bin/env python
import effess
import os
import sys
import inspect
import urllib
import tarfile
import os.path as path
import distutils.dir_util as dirutil
from subprocess import call
from progressbar import ProgressBar

Import('build')
Import('disable_thirdparty_check')

revisions = {
	"linux-i386": 35,
	"linux-x86_64": 27,
	"osx-universal": 28,
	"win32-i386": 42
}

thirdparty_name = 'thirdparty-%s-%s-r%s' % (build.os, build.arch, revisions[build.os+'-'+build.arch])
url = 'http://kroll.appcelerator.com.s3.amazonaws.com/kroll-%s.tgz' % (thirdparty_name)

build.third_party = path.join(build.cwd(), thirdparty_name)
if build.is_win32(): build.third_party = path.join(build.cwd(), "thirdparty_win32")
rtdir = build.runtime_build_dir

def exists():
	return path.isdir(build.third_party)

def fetch():
	print "You don't seem to have the appropriate thirdparty files. I'll fetch them."
	print "Downloading %s" % url

	pbar = ProgressBar().start()
	try:
		def progress_callback(count, block_size, total_size):
			if (total_size < 0):
				raise Exception("Could not fetch archive! Does it exist on the server?")
			percent = int(count * block_size * 100/total_size)
			pbar.update(percent)

		fname, msg = urllib.urlretrieve(url, reporthook=progress_callback)

		print "Fetched it (%s). I'm going to unpack it now..." % (fname)
		os.makedirs(build.third_party)
		tfile = tarfile.open(fname, mode="r:gz")
		tfile.extractall(path=build.third_party)
	finally:
		urllib.urlcleanup()
		pbar.finish()

def fetch_thirdparty():
	if disable_thirdparty_check:
		print "Warning: not checking thirdparty libraries"
		return

	if path.isdir(build.third_party):
		cwd = os.getcwd();
		os.chdir(build.third_party)
		print "Checking thirdparty files for update"
		call("git fetch");
		call("git pull origin master")
		os.chdir(cwd)
	else:
		print "Thirdparty folder does not exist. cloning the thirdparty repo."
		command = "git clone git@github.com:directi/thirdparty_win32.git"
		call(command)


####### scripts starts here #######
if build.is_win32(): fetch_thirdparty()
elif not exists(): fetch()

if build.is_linux():
	print 'WARNING:: Not copying files...'
#	effess.copy_tree(path.join(build.third_party, 'webkit', 'lib'), rtdir)
#	effess.copy_tree(path.join(build.third_party, 'poco', 'lib'), rtdir)
#	effess.copy_tree(path.join(build.third_party, 'curl', 'lib'), rtdir)

elif build.is_win32():
	print 'WARNING:: Not copying files...'
	# effess.copy_tree(path.join(build.third_party, 'poco', 'bin'), rtdir)
	# effess.copy_tree(path.join(build.third_party, 'webkit', 'bin'), rtdir)
	# effess.copy_tree(path.join(build.third_party, 'sdk'), path.join(build.dir, 'sdk'))

elif build.is_osx():
	print 'WARNING:: Not copying files...'
#	excludes = ['.h', '.defs', 'JavaScriptGlue.framework']
#	targets = []
#	for framework in Glob(path.join(build.third_party, '*/*.framework')):
#		t = build.utils.CopyToDir(framework, rtdir, exclude=excludes)
#		targets.append(t)

	# PHP dependencies don't aren't distributed with the runtime, only Poco's.
	# for libdir in Glob(path.join(build.third_party, '*/lib')):
#	libdir = path.join(build.third_party, "poco", "lib");
#	targets.append(build.utils.CopyTree(libdir, rtdir, exclude=excludes))
#	build.mark_build_target(targets)

