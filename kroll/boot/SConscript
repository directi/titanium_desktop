#!/usr/bin/env python
import os, os.path as path
import effess
Import('build')

def get_utils(dir):
	sources_utils = Glob('%s/*.cpp' % dir) + \
		Glob('%s/%s/*.cpp' % (dir, build.os))
	if build.is_osx():
		sources_utils.extend(Glob('%s/%s/*.mm' % (dir, build.os)))
	if not build.is_win32():
		sources_utils.extend(Glob('%s/posix/*.cpp' % dir))
	return sources_utils

def get_kboot_sources(utils_dir, build_obj, env):
	sources = ['boot.cpp']
	if build.is_osx():
		sources += Glob('*_osx.mm')
	if build.is_linux():
		sources += Glob('*_linux.cpp')
	if build.is_win32():
		sources += Glob('*_win32.cpp')
		sources += [env.RES('support/winboot.rc')]
	return sources

# Add the boot utils
utils_dir=path.join(build.kroll_source_dir, 'utils')
boot_out_dir=path.join(build.dir, 'objs', 'boot')

print "Warning: copying utils for boot."
effess.copy_to_dir(utils_dir, boot_out_dir)
boot_utils_dir=path.join(boot_out_dir, 'utils')

#copy all headers to SDKs
# use env.Install instead
effess.copy_tree(utils_dir, path.join(build.kroll_include_dir, 'kroll', 'utils'), include=['.h'])
effess.copy(path.join(utils_dir, 'base.h'), path.join(build.kroll_include_dir, 'base.h'))

kboot_env = build.env.Clone()

kboot_dir=path.abspath('.')
kboot_sources = get_kboot_sources(boot_utils_dir, build, kboot_env)
kboot_sources.extend(get_utils(boot_utils_dir))

kboot_env.Append(CPPPATH=[boot_utils_dir])
kboot_env.Append(CPPDEFINES=['USE_NO_EXPORT=1'])

if build.is_osx():
	kboot_env.Append(LIBS=['dl'])
	kboot_env.Append(FRAMEWORKS=['Cocoa','IOKit'])

if build.is_linux():
	kboot_env.Append(LIBS=['dl'])
	kboot_env.ParseConfig('pkg-config --cflags --libs gtk+-2.0 gdk-2.0')

if build.is_win32():
	kboot_env.Append(LIBS=['shell32','user32', 'gdi32'])
	kboot_env.Append(CCFLAGS=['/W3','/Wp64','/TP'])

	# Generate a manifest which will later be merged with the common controls manifest
	intermediate_manifest = path.join(build.dir, 'boot.exe.intermediate.manifest')
	linkflags = ['/MANIFEST', '/MANIFESTFILE:%s' % intermediate_manifest]
	if ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0):
		linkflags.append('/SUBSYSTEM:CONSOLE'),
		kboot_env.Append(CPPDEFINES=['WIN32_CONSOLE=1'])
	kboot_env.Append(LINKFLAGS=linkflags)

def add_console_flags(env):
	if build.is_win32():
		linkflags.append('/SUBSYSTEM:CONSOLE'),
		env.Append(CPPDEFINES=['WIN32_CONSOLE=1'])
		env.Append(LINKFLAGS=linkflags)
	env['OBJSUFFIX'] = env['OBJSUFFIX'] + '-dev'
	env.Append(CPPDEFINES=['DEV=1'])

# Breakpad integration
def get_breakpad(build_obj):
	breakpad = ARGUMENTS.get('breakpad', '1') != '0'
	if not(build_obj.is_32()) and build_obj.is_linux():
		breakpad = False
	return breakpad

def get_breakpad_sources(dir, build_obj):
	sources = []
	if build_obj.is_win32():
		sources += Glob('%s/breakpad/client/windows/crash_generation/*.cc' % dir) + \
			['%s/breakpad/client/windows/handler/exception_handler.cc' % dir,
			 '%s/breakpad/common/windows/guid_string.cc' % dir,
			 '%s/breakpad/common/windows/http_upload.cc' % dir]
	else:
		sources += \
		Glob('%s/breakpad/common/*.c' % dir) + \
		Glob('%s/breakpad/common/*.cc' % dir) + \
		Glob('%s/breakpad/client/*.cc' % dir) + \
		Glob('%s/breakpad/processor/*.cc' % dir)
	if build_obj.is_linux():
		sources += \
			Glob('%s/breakpad/client/linux/handler/*.cc' % dir) + \
			Glob('%s/breakpad/common/linux/*.cc' % dir)
	if breakpad and build.is_osx():
		sources += \
			Glob('%s/breakpad/common/mac/dwarf/*.cc' % dir) + \
			Glob('%s/breakpad/common/mac/*.cc' % dir) + \
			Glob('%s/breakpad/common/mac/*.mm' % dir) + \
			Glob('%s/breakpad/common/mac/*.m' % dir) + \
			Glob('%s/breakpad/client/mac/handler/*.cc' % dir)
	return sources

breakpad = get_breakpad(build)
if breakpad:
	kboot_sources.extend(get_breakpad_sources(kboot_dir, build))

if breakpad:
	kboot_env.Append(CPPPATH = ['breakpad'])
	kboot_env.Append(CPPDEFINES = [['USE_BREAKPAD', 1]])
	if 'CPPFLAGS' in kboot_env and '-Werror' in kboot_env['CPPFLAGS']:
		kboot_env['CPPFLAGS'].remove('-Werror')
	if build.is_win32():
		kboot_env.Append(LIBS=['wininet'])
	if build.is_osx():
		kboot_env.Append(LIBS=['libcrypto'])

kboot_out = path.join(build.dir, 'kboot')
p = kboot_env.Program(kboot_out, kboot_sources)
build.mark_build_target(p)

if not (ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0)):
	kboot_env_dev = kboot_env.Clone()
	add_console_flags(kboot_env_dev)
	kboot_out_dev = path.join(build.dir, 'kboot-dev')
	p1 = kboot_env_dev.Program(kboot_out_dev, kboot_sources)
	build.mark_build_target(p1)


# Merge kboot's manifest with the common controls manifest, so that
# it can use XP-style common controls -- and still have the correct
# references to MSVCRT8. Also include Webkit.tlb in the manifest and
# have it reference the path "WebKit.dll". This is for XP systems which
# will need to bootstrap by running runtimedir/kboot.exe during the 
# boot process.
if build.is_win32():
	webkit_tp = path.join(build.third_party, 'webkit')
	webkit_lib = path.join(webkit_tp, 'lib')
	webkit_tlb = path.join(webkit_lib, 'WebKit.tlb')

	cc_manifest = path.join(build.cwd(), 'support', 'common_controls.manifest')
	merged_manifest = path.join(build.dir, 'kboot.merged.manifest')
	kboot_env.AddPostAction(p, 'mt.exe -nologo -manifest "%s" "%s" -out:"%s"' % (intermediate_manifest, cc_manifest, merged_manifest))
	kboot_env.AddPostAction(p, ('mt.exe -nologo /outputresource:"%s.exe;#1" /manifest "%s"' % (kboot_out, merged_manifest)))

	if not (ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0)):
		merged_manifest = path.join(build.dir, 'kboot-dev.merged.manifest')
		kboot_env_dev.AddPostAction(p1, 'mt.exe -nologo -manifest "%s" "%s" -out:"%s"' % (intermediate_manifest, cc_manifest, merged_manifest))
		kboot_env_dev.AddPostAction(p1, ('mt.exe -nologo /outputresource:"%s.exe;#1" /manifest "%s"' % (kboot_out_dev, merged_manifest)))

