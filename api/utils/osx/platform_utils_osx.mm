/**
 * Appcelerator Kroll - licensed under the Apache Public License 2
 * see LICENSE in the root folder for details on the license.
 * Copyright (c) 2009 Appcelerator, Inc. All Rights Reserved.
 */

// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
#include "../utils.h"
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <sys/types.h>
#include <sys/socket.h>
#include <ifaddrs.h>
#include <net/if_dl.h>
#include <Cocoa/Cocoa.h>

namespace UTILS_NS
{
namespace PlatformUtils
{
	void GetNodeId(NodeId& id)
	{
		struct ifaddrs* ifaphead;
		int rc = getifaddrs(&ifaphead);
		if (rc) throw std::string("cannot get network adapter list");

		bool foundAdapter = false;
		for (struct ifaddrs* ifap = ifaphead; ifap; ifap = ifap->ifa_next) 
		{
			if (ifap->ifa_addr && ifap->ifa_addr->sa_family == AF_LINK) 
			{
				struct sockaddr_dl* sdl = reinterpret_cast<struct sockaddr_dl*>(ifap->ifa_addr);
				caddr_t ap = (caddr_t) (sdl->sdl_data + sdl->sdl_nlen);
				int alen = sdl->sdl_alen;
				if (ap && alen > 0) 
				{
					memcpy(&id, ap, sizeof(id));
					foundAdapter = true;
					break;
				}
			}
		}
		freeifaddrs(ifaphead);
		if (!foundAdapter) throw std::string("cannot determine MAC address (no suitable network adapter found)");
	}

	std::string GetUsername()
	{
		return std::string([NSUserName() UTF8String]);
	}
}
}
